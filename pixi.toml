[project]
name = "bnl"
version = "0.2.1"
description = "Boundary and Labeling: Tools for Hierarchical Music Structure Analysis"
authors = ["tomxi <tom.xi@nyu.edu>"]
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64"]

[system-requirements]

[dependencies]
# Core scientific computing
numpy = "*"
pandas = "*"
matplotlib = "*"
seaborn = "*"

# Audio processing and MIR
librosa = "*"
pyarrow = "*"
mir_eval = "*"

# Runtime environment
python = "3.12.*"
requests = ">=2.32.4,<3"
ffmpeg = ">=7.1.1,<8"
plotly = ">=6.2.0,<7"

[host-dependencies]
pip = "*"

[build-dependencies]
setuptools = ">=61.0.0"
wheel = "*"

[pypi-dependencies]
jams = "*"
streamlit-plotly-events = "*"
autoclasstoc = "*"

[feature.docs.dependencies]
# Documentation dependencies
sphinx = "*"
sphinx-rtd-theme = "*"
numpydoc = "*"
sphinx-copybutton = "*"
myst-parser = "*"
sphinx-autobuild = "*"

[feature.dev.dependencies]
# Development dependencies
pytest = "*"
pytest-cov = "*"
ruff = "*"
mypy = "*"
types-requests = "*"
requests-mock = "*"
pytest-mock = "*"

[feature.notebooks.dependencies]
# Notebook dependencies
jupyter = "*"
ipykernel = "*"

[feature.apps.dependencies]
# Dependencies for running interactive apps
streamlit = "*"

[feature.cloud.dependencies]
# Cloud storage dependencies (for AWS S3/R2 operations)
boto3 = ">=1.38.44,<2"

[environments]
# Default environment includes most common development tools
default = ["docs", "dev", "notebooks", "apps"]

# Minimal environment with just core dependencies
minimal = []

# Specialized environments for specific use cases
docs = ["docs"]
dev = ["dev"]
notebooks = ["notebooks"]
apps = ["apps"]
cloud = ["cloud"]

[tasks]
# ===================================================================
# Core Development Loop
# ===================================================================

# Format source code (run frequently during development)
format = "ruff format src/ tests/ apps/"

# Fix code style issues automatically
lint = "ruff check src/ tests/ apps/ --fix"

# Run all tests
test = "pip install -e . && pytest"

# Run full validation pipeline (format + lint + types + test)
check = "pip install -e . && ruff format src/ tests/ apps/ --check && ruff check src/ tests/ apps/ && mypy src/ --ignore-missing-imports && pytest"

# ===================================================================
# Extended Development Tasks
# ===================================================================

# Run tests with coverage report
test-cov = "pip install -e . && pytest --cov=bnl --cov-report=term-missing"
test-cov-html = "pip install -e . && pytest --cov=bnl --cov-report=html"

# Type checking only (faster when you just need types)
types = "mypy src/ --ignore-missing-imports"

# Clean build artifacts and cache  
clean = "rm -rf build/ htmlcov/ dist/ .pytest_cache/ .coverage .mypy_cache/ 'src/bnl.egg-info' && find . -name '__pycache__' -type d -exec rm -rf {} + && pixi run docs-clean"

# ===================================================================
# Application & Data Tasks
# ===================================================================

# Run the Streamlit experiment app
exp = "streamlit run ./apps/exp.py"
kde = "streamlit run ./apps/kde.py"

# Build local data manifest for development
build-local-manifest = "python scripts/build_local_manifest.py"

# Build cloud manifest with R2 URLs (requires cloud environment)
# Usage: pixi run -e cloud build-cloud-manifest
build-cloud-manifest = "python scripts/build_cloud_manifest.py"

# ===================================================================
# Documentation Tasks
# ===================================================================

# Build documentation (output to docs/_build/html)
docs-build = "pixi run docs-clean && sphinx-build -b html docs docs/_build/html"

# Serve docs with live reload for development
docs-serve = "sphinx-autobuild docs docs/_build/html --host 127.0.0.1"

# Clean documentation build artifacts
docs-clean = "rm -rf docs/_build docs/api/generated"
